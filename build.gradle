plugins {
  //PluginManagementSpec.plugins?(Action<? super PluginDependenciesSpec> action)
	//Blocks are methods where the last argument is either of type Closure or Action
  //Delegate for this closure is PluginDependenciesSpec
  //PluginDependenciesSpec.id()
  id('java')
  id('checkstyle')
  id('jacoco')
  //version() is a method on the object returned by id()
  //See https://docs.gradle.org/current/dsl/org.gradle.plugin.use.PluginDependenciesSpec.html
  id('org.springframework.boot').version('2.7.6')
  id('io.spring.dependency-management').version('1.0.15.RELEASE')
}
//Project.getGroup()
group = 'exploring-spring'
//Project.getVersion()
version = '0.0.0'
repositories {
  //PluginManagementSpec.repositories?(Action<? super RepositoryHandler> repositoriesAction)
  mavenCentral() //RepositoryHandler.mavenCentral()  https://repo.maven.apache.org/maven2/
}
dependencies {
  // implementation() and testImplementation() methods added by java plugin
  implementation(group: 'org.springframework.boot', name: 'spring-boot-starter')
  implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-web')
  implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc')
  implementation(group: 'com.couchbase.client', name: 'java-client', version: '3.4.0')
  implementation(group: 'mysql', name: 'mysql-connector-java', version: '8.0.33')
  implementation(group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1')
  implementation(group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.4')
  implementation(group: 'org.hibernate', name: 'hibernate-core', version: '5.3.5.Final')
  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test')
  // See https://docs.gradle.org/current/userguide/java_testing.html#using_junit5
  testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.7.1')
  testRuntimeOnly(group: 'org.junit.platform', name: 'junit-platform-launcher')
}
//Extensions are added to the project by plugins.
//Each extension is available as a method which takes a closure or Action as a parameter.
java {
  //JavaPluginExtension.setSourceCompatibility()
  sourceCompatibility = "17"
  //JavaPluginExtension.setTargetCompatibility()
  targetCompatibility = "17"
}
//Extensions are added to the project by plugins.
//Each extension is available as a method which takes a closure or Action as a parameter.
//See https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.CheckstyleExtension.html
checkstyle {
  maxWarnings = 0
  maxErrors = 0
  showViolations = true
}
test {
  //A method is added on project for each task, method name as as task name, and taking a single Closure/Action parameter
  //Task.finalizedBy()
  finalizedBy('jacocoTestReport') // report is always generated after tests run
}
jacocoTestReport {
  //A method is added on project for each task, method name as as task name, and taking a single Closure/Action parameter
  //Task.dependsOn()
  dependsOn('test') // tests are required to run before generating the report
}
tasks.named('test') {
  //Test.useJUnitPlatform()
  useJUnitPlatform() // JUnit Platform should be used to discover and execute the tests
}

